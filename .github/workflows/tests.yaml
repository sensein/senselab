name: tests

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch:

jobs:
  macos-tests:
    if: github.event.pull_request.draft == false && contains(github.event.pull_request.labels.*.name, 'to-test')
    name: macOS-tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
        - {os: macos-latest, architecture: arm64, python-version: '3.10'}
        # - {os: macos-latest, architecture: arm64, python-version: '3.11'}
        # - {os: macos-latest, architecture: arm64, python-version: '3.12'}
        # the reason why we commented out 3.11 and 3.12 is that it hits github rate limit for some modules (e.g., knn-vc, Camb-ai/mars5-tts)
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1   # no need for the history
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install ffmpeg
      run: |
        brew install ffmpeg
      shell: bash
    - name: Verify ffmpeg
      run: |
        ffmpeg -version
      shell: bash
    - name: Install Poetry
      run: pip install poetry==2.1.1
      shell: bash
    - name: Install dependencies with Poetry
      run: |
        poetry env use ${{ matrix.python-version }}
        poetry install --extras "audio articulatory text video" --with dev
        poetry env info
      shell: bash
    - name: check files
      run: |
        ls /Users/runner/work/senselab/senselab/src/tests/data_for_testing/
      shell: bash
    - name: check pwd
      run: pwd
      shell: bash
    - name: Verify FFmpeg Installation
      run: |
        echo "PATH: $PATH"
        which ffmpeg
        ffmpeg -version
      shell: bash
    - name: Run unit tests
      id: run-tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        poetry run pytest -n auto \
          --junitxml=pytest.xml \
          --cov-report=term-missing:skip-covered \
          --cov-report=xml:coverage.xml \
          --cov=src src/tests \
          --log-level=DEBUG \
          --verbose
      shell: bash
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  pre-commit:
    if: github.event.pull_request.draft == false && contains(github.event.pull_request.labels.*.name, 'to-test')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10']
    steps:
    - uses: actions/checkout@v4
      with:  # no need for the history
        fetch-depth: 1
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      run: pip install poetry==2.1.1
      shell: bash
    - name: Install dependencies with Poetry
      run: |
        poetry env use ${{ matrix.python-version }}
        poetry install --extras "audio articulatory text video" --with dev
        poetry env info
      shell: bash
    - name: Install pre-commit
      run: pip install pre-commit
      shell: bash
    - name: Run pre-commit
      run: |
        poetry run pre-commit run --all-files
      shell: bash


  start-runner-310-core:
    if: >
      (github.event.pull_request.draft == false && contains(github.event.pull_request.labels.*.name, 'to-test-gpu') && success())
      || github.event_name == 'workflow_dispatch'
    needs:
    - pre-commit
    - macos-tests
    name: start-runner-310-core
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
      job-ran: ${{ steps.set-ran.outputs.ran }}
    steps:
    - id: set-ran
      run: echo "::set-output name=ran::true"
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Start EC2 runner
      id: start-ec2-runner
      uses: machulav/ec2-github-runner@v2
      with:
        mode: start
        github-token: ${{ secrets.GH_TOKEN }}
        ec2-image-id: ${{ vars.AWS_IMAGE_ID }}
        ec2-instance-type: ${{ vars.AWS_INSTANCE_TYPE }}
        subnet-id: ${{ vars.AWS_SUBNET }}
        security-group-id: ${{ vars.AWS_SECURITY_GROUP }}

  ubuntu-tests-310-core:
    name: ubuntu-tests-310-core
    needs: start-runner-310-core
    runs-on: ${{ needs.start-runner-310-core.outputs.label }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ vars.WORKING_DIR }}
    strategy:
      matrix:
        python-version: ['3.10']
    env:
      WORKING_DIR: ${{ vars.WORKING_DIR }}
      TORCH_HOME: ${{ vars.WORKING_DIR }}/torch
      PIP_CACHE_DIR: ${{ vars.WORKING_DIR }}/pip
      POETRY_CACHE_DIR: ${{ vars.WORKING_DIR }}/poetry
      HF_HOME: ${{ vars.WORKING_DIR }}/huggingface
      TRANSFORMERS_CACHE: ${{ vars.WORKING_DIR }}/huggingface/transformers
      HF_DATASETS_CACHE: ${{ vars.WORKING_DIR }}/huggingface/datasets
    outputs:
      job-ran: ${{ steps.set-ran.outputs.ran }}
    steps:
    - id: set-ran
      run: echo "::set-output name=ran::true"
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1   # no need for the history
    - name: Create cache directories
      run: |
        mkdir -p "$POETRY_CACHE_DIR" "$PIP_CACHE_DIR" "$TORCH_HOME" "$HF_HOME" "$TRANSFORMERS_CACHE" "$HF_DATASETS_CACHE"
        ls -lah ${{ vars.WORKING_DIR }}
      shell: bash
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install ffmpeg
      run: |
        sudo apt-get update && sudo apt-get install -y ffmpeg
        ffmpeg -version
      shell: bash
    - name: Install Poetry
      run: |
        which python
        python --version
        pip install poetry==2.1.1
        which poetry
        poetry --version
      shell: bash
    - name: Check available space
      run: |
        df -h
      shell: bash
    - name: Echo python info
      run: |
        python --version
        which python
        which poetry
      shell: bash
    - name: Copy senselab directory to current directory
      run: |
        cp -r /actions-runner/_work/senselab/senselab .
    - name: Install dependencies with Poetry (Core only)
      run: |
        cd senselab
        poetry env use ${{ matrix.python-version }}
        poetry install --with dev
      shell: bash
    - name: Check NVIDIA SMI details
      run: |
        cd senselab
        poetry run nvidia-smi
        poetry run nvidia-smi -L
        poetry run nvidia-smi -q -d Memory
      shell: bash
    - name: Prepare cache folder for pytest
      run: mkdir -p $WORKING_DIR/pytest/temp
      shell: bash
    - name: Run unit tests
      id: run-tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: >
        cd senselab && poetry run pytest \
          --rootdir=$WORKING_DIR/pytest \
          --basetemp=$WORKING_DIR/pytest/temp \
          --junitxml=pytest.xml \
          --cov-report=term-missing:skip-covered \
          --cov-report=xml:coverage.xml \
          --cov=src src/tests \
          --log-level=DEBUG \
          --verbose
      shell: bash

  stop-runner-310-core:
    name: stop-runner-310-core
    needs:
    - start-runner-310-core   # waits for the EC2 instance to be created
    - ubuntu-tests-310-core   # waits for the actual job to finish
    runs-on: ubuntu-latest
    if: ${{ needs.start-runner-310-core.outputs.job-ran == 'true' && needs.ubuntu-tests-310-core.outputs.job-ran == 'true' || failure() }} # required to stop the runner even if an error occurred in previous jobs
    steps:
    - name: Check available space
      run: |
        df -h
      shell: bash
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Stop EC2 runner
      uses: machulav/ec2-github-runner@v2
      with:
        mode: stop
        github-token: ${{ secrets.GH_TOKEN }}
        label: ${{ needs.start-runner-310-core.outputs.label }}
        ec2-instance-id: ${{ needs.start-runner-310-core.outputs.ec2-instance-id }}


  start-runner-310:
    if: >
      (github.event.pull_request.draft == false && contains(github.event.pull_request.labels.*.name, 'to-test-gpu') && success())
      || github.event_name == 'workflow_dispatch'
    needs:
    - pre-commit
    - macos-tests
    name: start-runner-310
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
      job-ran: ${{ steps.set-ran.outputs.ran }}
    steps:
    - id: set-ran
      run: echo "::set-output name=ran::true"
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Start EC2 runner
      id: start-ec2-runner
      uses: machulav/ec2-github-runner@v2
      with:
        mode: start
        github-token: ${{ secrets.GH_TOKEN }}
        ec2-image-id: ${{ vars.AWS_IMAGE_ID }}
        ec2-instance-type: ${{ vars.AWS_INSTANCE_TYPE }}
        subnet-id: ${{ vars.AWS_SUBNET }}
        security-group-id: ${{ vars.AWS_SECURITY_GROUP }}


  ubuntu-tests-310:
    name: ubuntu-tests-310
    needs: start-runner-310
    runs-on: ${{ needs.start-runner-310.outputs.label }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ vars.WORKING_DIR }}
    strategy:
      matrix:
        python-version: ['3.10']
    env:
      WORKING_DIR: ${{ vars.WORKING_DIR }}
      TORCH_HOME: ${{ vars.WORKING_DIR }}/torch
      PIP_CACHE_DIR: ${{ vars.WORKING_DIR }}/pip
      POETRY_CACHE_DIR: ${{ vars.WORKING_DIR }}/poetry
      HF_HOME: ${{ vars.WORKING_DIR }}/huggingface
      TRANSFORMERS_CACHE: ${{ vars.WORKING_DIR }}/huggingface/transformers
      HF_DATASETS_CACHE: ${{ vars.WORKING_DIR }}/huggingface/datasets
    outputs:
      job-ran: ${{ steps.set-ran.outputs.ran }}
    steps:
    - id: set-ran
      run: echo "::set-output name=ran::true"
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1   # no need for the history
    - name: Cleanup disk space
      run: |
        echo "Cleaning up disk space..."
        rm -rf ~/.cache
        mkdir -p ~/.cache
        rm -rf ~/.npm
        rm -rf ~/.poetry
        df -h
      shell: bash
    - name: Symlink default cache folders
      run: |
        mkdir -p "$WORKING_DIR"/{pip,poetry,torch,huggingface,wget,tmp}
        ln -sf "$WORKING_DIR/pip" ~/.cache/pip
        ln -sf "$WORKING_DIR/poetry" ~/.cache/pypoetry
        ln -sf "$WORKING_DIR/torch" ~/.cache/torch
        ln -sf "$WORKING_DIR/huggingface" ~/.cache/huggingface
        ln -sf "$WORKING_DIR/huggingface" ~/.huggingface
        ln -sf "$WORKING_DIR/tmp" /tmp  # override /tmp if large temp files are expected
        ls -lah ${{ vars.WORKING_DIR }}
      shell: bash
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install ffmpeg
      run: |
        sudo apt-get update && sudo apt-get install -y ffmpeg
        ffmpeg -version
      shell: bash
    - name: Install CUDA Toolkit 12.6 (minimize root disk usage)
      run: |
        set -e

        # Reuse the same WORKING_DIR for CUDA installer
        export INSTALL_ROOT="$WORKING_DIR"

        # Download the pin file and add it to apt preferences
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
        sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600

        # Download CUDA installer into working dir
        cd "$INSTALL_ROOT"
        CUDA_DEB=cuda-repo-ubuntu2204-12-6-local_12.6.3-560.35.05-1_amd64.deb
        wget "https://developer.download.nvidia.com/compute/cuda/12.6.3/local_installers/$CUDA_DEB"

        # Install and redirect unpacked contents
        sudo dpkg -i "./$CUDA_DEB"

        if [ -d /var/cuda-repo-ubuntu2204-12-6-local ]; then
          sudo mv /var/cuda-repo-ubuntu2204-12-6-local "$INSTALL_ROOT/"
          sudo ln -s "$INSTALL_ROOT/cuda-repo-ubuntu2204-12-6-local" /var/cuda-repo-ubuntu2204-12-6-local
        fi

        # Install the CUDA Toolkit
        sudo cp /var/cuda-repo-ubuntu2204-12-6-local/cuda-*-keyring.gpg /usr/share/keyrings/
        sudo apt-get update
        sudo apt-get -y install cuda-toolkit-12-6

        # Clean up installer and symlink
        sudo rm -f "$INSTALL_ROOT/$CUDA_DEB"
        sudo rm -f /var/cuda-repo-ubuntu2204-12-6-local
      shell: bash
    - name: Check CUDA and GCC compatibility
      run: |
        echo "Checking CUDA version..."
        if [ -x "$(command -v nvcc)" ]; then
          nvcc --version
        else
          echo "⚠️ nvcc not found - CUDA might not be installed properly"
          exit 1
        fi

        echo "Checking GCC version..."
        gcc_version=$(gcc -dumpversion)
        echo "GCC version: $gcc_version"

        # Check if GCC version is compatible with CUDA (e.g., CUDA 12.6 supports up to GCC 11)
        if [[ "$gcc_version" =~ ^12 ]]; then
          echo "❌ GCC 12 is not supported by CUDA 12.6. Please use GCC 11."
          exit 1
        else
          echo "✅ GCC version appears compatible with CUDA 12.6"
        fi
    - name: Check available space
      run: |
        df -h
      shell: bash
    - name: Clean apt cache
      run: |
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
      shell: bash
    - name: Check available space
      run: |
        df -h
      shell: bash
    - name: Install Poetry
      run: |
        which python
        python --version
        pip install poetry==2.1.1
        which poetry
        poetry --version
      shell: bash
    - name: Check available space
      run: |
        df -h
      shell: bash
    - name: Echo python info
      run: |
        python --version
        which python
        which poetry
      shell: bash
    - name: Copy senselab directory to current directory
      run: |
        cp -r /actions-runner/_work/senselab/senselab .
    - name: Install dependencies with Poetry
      run: |
        cd senselab
        poetry env use ${{ matrix.python-version }}
        poetry install --extras "audio articulatory text video" --with dev
      shell: bash
    - name: Check NVIDIA SMI details
      run: |
        cd senselab
        poetry run nvidia-smi
        poetry run nvidia-smi -L
        poetry run nvidia-smi -q -d Memory
      shell: bash
    - name: Prepare cache folder for pytest
      run: mkdir -p $WORKING_DIR/pytest/temp
      shell: bash
    - name: Run unit tests
      id: run-tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: >
        cd senselab && poetry run pytest \
          --rootdir=$WORKING_DIR/pytest \
          --basetemp=$WORKING_DIR/pytest/temp \
          --junitxml=pytest.xml \
          --cov-report=term-missing:skip-covered \
          --cov-report=xml:coverage.xml \
          --cov=src src/tests \
          --log-level=DEBUG \
          --verbose
      shell: bash

  stop-runner-310:
    name: stop-runner-310
    needs:
    - start-runner-310   # waits for the EC2 instance to be created
    - ubuntu-tests-310   # waits for the actual job to finish
    runs-on: ubuntu-latest
    if: ${{ needs.start-runner-310.outputs.job-ran == 'true' && needs.ubuntu-tests-310.outputs.job-ran == 'true' || failure() }} # required to stop the runner even if an error occurred in previous jobs
    steps:
    - name: Check available space
      run: |
        df -h
      shell: bash
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Stop EC2 runner
      uses: machulav/ec2-github-runner@v2
      with:
        mode: stop
        github-token: ${{ secrets.GH_TOKEN }}
        label: ${{ needs.start-runner-310.outputs.label }}
        ec2-instance-id: ${{ needs.start-runner-310.outputs.ec2-instance-id }}

  start-runner-311:
    if: >
      (github.event.pull_request.draft == false && contains(github.event.pull_request.labels.*.name, 'to-test-gpu') && success())
      || github.event_name == 'workflow_dispatch'
    needs:
    - pre-commit
    - macos-tests
    name: start-runner-311
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
      job-ran: ${{ steps.set-ran.outputs.ran }}
    steps:
    - id: set-ran
      run: echo "::set-output name=ran::true"
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Start EC2 runner
      id: start-ec2-runner
      uses: machulav/ec2-github-runner@v2
      with:
        mode: start
        github-token: ${{ secrets.GH_TOKEN }}
        ec2-image-id: ${{ vars.AWS_IMAGE_ID }}
        ec2-instance-type: ${{ vars.AWS_INSTANCE_TYPE }}
        subnet-id: ${{ vars.AWS_SUBNET }}
        security-group-id: ${{ vars.AWS_SECURITY_GROUP }}

  ubuntu-tests-311:
    name: ubuntu-tests-311
    needs: start-runner-311
    runs-on: ${{ needs.start-runner-311.outputs.label }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ vars.WORKING_DIR }}
    strategy:
      matrix:
        python-version: ['3.11']
    env:
      WORKING_DIR: ${{ vars.WORKING_DIR }}
      TORCH_HOME: ${{ vars.WORKING_DIR }}/torch
      PIP_CACHE_DIR: ${{ vars.WORKING_DIR }}/pip
      POETRY_CACHE_DIR: ${{ vars.WORKING_DIR }}/poetry
      HF_HOME: ${{ vars.WORKING_DIR }}/huggingface
      TRANSFORMERS_CACHE: ${{ vars.WORKING_DIR }}/huggingface/transformers
      HF_DATASETS_CACHE: ${{ vars.WORKING_DIR }}/huggingface/datasets
    outputs:
      job-ran: ${{ steps.set-ran.outputs.ran }}
    steps:
    - id: set-ran
      run: echo "::set-output name=ran::true"
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1   # no need for the history
    - name: Create cache directories
      run: |
        mkdir -p "$POETRY_CACHE_DIR" "$PIP_CACHE_DIR" "$TORCH_HOME" "$HF_HOME" "$TRANSFORMERS_CACHE" "$HF_DATASETS_CACHE"
        ls -lah ${{ vars.WORKING_DIR }}
      shell: bash
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install ffmpeg
      run: |
        sudo apt-get update && sudo apt-get install -y ffmpeg
        ffmpeg -version
      shell: bash
    - name: Install CUDA Toolkit 12.6
      run: |
        # Download the CUDA pin file as before
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
        sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600

        # Download the .deb installer to /opt/dlami/nvme
        cd /opt/dlami/nvme
        wget https://developer.download.nvidia.com/compute/cuda/12.6.3/local_installers/cuda-repo-ubuntu2204-12-6-local_12.6.3-560.35.05-1_amd64.deb

        # Install the .deb from /opt/dlami/nvme
        sudo dpkg -i ./cuda-repo-ubuntu2204-12-6-local_12.6.3-560.35.05-1_amd64.deb

        # Move the extracted repo directory to /opt/dlami/nvme and symlink it back to /var
        sudo mv /var/cuda-repo-ubuntu2204-12-6-local /opt/dlami/nvme/
        sudo ln -s /opt/dlami/nvme/cuda-repo-ubuntu2204-12-6-local /var/cuda-repo-ubuntu2204-12-6-local

        # Continue as normal
        sudo cp /var/cuda-repo-ubuntu2204-12-6-local/cuda-*-keyring.gpg /usr/share/keyrings/
        sudo apt-get update
        sudo apt-get -y install cuda-toolkit-12-6
      shell: bash
    - name: Install Poetry
      run: |
        which python
        python --version
        pip install poetry==2.1.1
        which poetry
        poetry --version
      shell: bash
    - name: Check available space
      run: |
        df -h
      shell: bash
    - name: Copy senselab directory to current directory
      run: |
        cp -r /actions-runner/_work/senselab/senselab .
    - name: Install dependencies with Poetry
      run: |
        cd senselab
        poetry env use ${{ matrix.python-version }}
        poetry install --extras "audio articulatory text video" --with dev
      shell: bash
    - name: Check poetry info
      run: |
        cd senselab
        poetry env info
        poetry --version
      shell: bash
    - name: Check NVIDIA SMI details
      run: |
        cd senselab
        poetry run nvidia-smi
        poetry run nvidia-smi -L
        poetry run nvidia-smi -q -d Memory
      shell: bash
    - name: Prepare cache folder for pytest
      run: mkdir -p $WORKING_DIR/pytest/temp
      shell: bash
    - name: Run unit tests
      id: run-tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: >
        cd senselab && poetry run pytest \
          --rootdir=$WORKING_DIR/pytest \
          --basetemp=$WORKING_DIR/pytest/temp \
          --junitxml=pytest.xml \
          --cov-report=term-missing:skip-covered \
          --cov-report=xml:coverage.xml \
          --cov=src src/tests \
          --log-level=DEBUG \
          --verbose
      shell: bash

  stop-runner-311:
    name: stop-runner-311
    needs:
    - start-runner-311   # waits for the EC2 instance to be created
    - ubuntu-tests-311   # waits for the actual job to finish
    runs-on: ubuntu-latest
    if: ${{ needs.start-runner-311.outputs.job-ran == 'true' && needs.ubuntu-tests-311.outputs.job-ran == 'true' || failure() }} # required to stop the runner even if an error occurred in previous jobs
    steps:
    - name: Check available space
      run: |
        df -h
      shell: bash
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Stop EC2 runner
      uses: machulav/ec2-github-runner@v2
      with:
        mode: stop
        github-token: ${{ secrets.GH_TOKEN }}
        label: ${{ needs.start-runner-311.outputs.label }}
        ec2-instance-id: ${{ needs.start-runner-311.outputs.ec2-instance-id }}


  start-runner-312:
    if: >
      (github.event.pull_request.draft == false && contains(github.event.pull_request.labels.*.name, 'to-test-gpu') && success())
      || github.event_name == 'workflow_dispatch'
    needs:
    - pre-commit
    - macos-tests
    name: start-runner-312
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
      job-ran: ${{ steps.set-ran.outputs.ran }}
    steps:
    - id: set-ran
      run: echo "::set-output name=ran::true"
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Start EC2 runner
      id: start-ec2-runner
      uses: machulav/ec2-github-runner@v2
      with:
        mode: start
        github-token: ${{ secrets.GH_TOKEN }}
        ec2-image-id: ${{ vars.AWS_IMAGE_ID }}
        ec2-instance-type: ${{ vars.AWS_INSTANCE_TYPE }}
        subnet-id: ${{ vars.AWS_SUBNET }}
        security-group-id: ${{ vars.AWS_SECURITY_GROUP }}

  ubuntu-tests-312:
    name: ubuntu-tests-312
    needs: start-runner-312
    runs-on: ${{ needs.start-runner-312.outputs.label }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ vars.WORKING_DIR }}
    strategy:
      matrix:
        python-version: ['3.12']
    env:
      WORKING_DIR: ${{ vars.WORKING_DIR }}
      TORCH_HOME: ${{ vars.WORKING_DIR }}/torch
      PIP_CACHE_DIR: ${{ vars.WORKING_DIR }}/pip
      POETRY_CACHE_DIR: ${{ vars.WORKING_DIR }}/poetry
      HF_HOME: ${{ vars.WORKING_DIR }}/huggingface
      TRANSFORMERS_CACHE: ${{ vars.WORKING_DIR }}/huggingface/transformers
      HF_DATASETS_CACHE: ${{ vars.WORKING_DIR }}/huggingface/datasets
    outputs:
      job-ran: ${{ steps.set-ran.outputs.ran }}
    steps:
    - id: set-ran
      run: echo "::set-output name=ran::true"
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1   # no need for the history
    - name: Create cache directories
      run: |
        mkdir -p "$POETRY_CACHE_DIR" "$PIP_CACHE_DIR" "$TORCH_HOME" "$HF_HOME" "$TRANSFORMERS_CACHE" "$HF_DATASETS_CACHE"
        ls -lah ${{ vars.WORKING_DIR }}
      shell: bash
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install ffmpeg
      run: |
        sudo apt-get update && sudo apt-get install -y ffmpeg
        ffmpeg -version
      shell: bash
    - name: Install CUDA Toolkit 12.6
      run: |
        # Download the CUDA pin file as before
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
        sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600

        # Download the .deb installer to /opt/dlami/nvme
        cd /opt/dlami/nvme
        wget https://developer.download.nvidia.com/compute/cuda/12.6.3/local_installers/cuda-repo-ubuntu2204-12-6-local_12.6.3-560.35.05-1_amd64.deb

        # Install the .deb from /opt/dlami/nvme
        sudo dpkg -i ./cuda-repo-ubuntu2204-12-6-local_12.6.3-560.35.05-1_amd64.deb

        # Move the extracted repo directory to /opt/dlami/nvme and symlink it back to /var
        sudo mv /var/cuda-repo-ubuntu2204-12-6-local /opt/dlami/nvme/
        sudo ln -s /opt/dlami/nvme/cuda-repo-ubuntu2204-12-6-local /var/cuda-repo-ubuntu2204-12-6-local

        # Continue as normal
        sudo cp /var/cuda-repo-ubuntu2204-12-6-local/cuda-*-keyring.gpg /usr/share/keyrings/
        sudo apt-get update
        sudo apt-get -y install cuda-toolkit-12-6
      shell: bash
    - name: Install Poetry
      run: |
        which python
        python --version
        pip install poetry==2.1.1
        which poetry
        poetry --version
      shell: bash
    - name: Check available space
      run: |
        df -h
      shell: bash
    - name: Copy senselab directory to current directory
      run: |
        cp -r /actions-runner/_work/senselab/senselab .
    - name: Install dependencies with Poetry
      run: |
        cd senselab
        poetry env use ${{ matrix.python-version }}
        poetry install --extras "audio articulatory text video" --with dev
      shell: bash
    - name: Check poetry info
      run: |
        cd senselab
        poetry env info
        poetry --version
      shell: bash
    - name: Check NVIDIA SMI details
      run: |
        cd senselab
        poetry run nvidia-smi
        poetry run nvidia-smi -L
        poetry run nvidia-smi -q -d Memory
      shell: bash
    - name: Prepare cache folder for pytest
      run: mkdir -p $WORKING_DIR/pytest/temp
      shell: bash
    - name: Run unit tests
      id: run-tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: >
        cd senselab && poetry run pytest \
          --rootdir=$WORKING_DIR/pytest \
          --basetemp=$WORKING_DIR/pytest/temp \
          --junitxml=pytest.xml \
          --cov-report=term-missing:skip-covered \
          --cov-report=xml:coverage.xml \
          --cov=src src/tests \
          --log-level=DEBUG \
          --verbose
      shell: bash

  stop-runner-312:
    name: stop-runner-312
    needs:
    - start-runner-312   # waits for the EC2 instance to be created
    - ubuntu-tests-312   # waits for the actual job to finish
    runs-on: ubuntu-latest
    if: ${{ needs.start-runner-312.outputs.job-ran == 'true' && needs.ubuntu-tests-312.outputs.job-ran == 'true' || failure() }} # required to stop the runner even if an error occurred in previous jobs
    steps:
    - name: Check available space
      run: |
        df -h
      shell: bash
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Stop EC2 runner
      uses: machulav/ec2-github-runner@v2
      with:
        mode: stop
        github-token: ${{ secrets.GH_TOKEN }}
        label: ${{ needs.start-runner-312.outputs.label }}
        ec2-instance-id: ${{ needs.start-runner-312.outputs.ec2-instance-id }}
