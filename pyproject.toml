[project]
name = "senselab"
dynamic = ["version"]
description = "senselab is a Python package that simplifies building pipelines for speech and voice analysis."
authors = [
  {name = "Fabio Catania", email = "fabiocat@mit.edu"},
  {name = "Satra Ghosh", email = "satra@mit.edu"}
]
maintainers = [
  {name = "Fabio Catania", email = "fabiocat@mit.edu"},
  {name = "Satra Ghosh", email = "satra@mit.edu"}
]
license = {file = "LICENSE.txt"}
readme = "README.md"
requires-python = ">=3.11,<3.13"
homepage = "https://github.com/sensein/senselab"
repository = "https://github.com/sensein/senselab"
documentation = "https://sensein.github.io/senselab"
keywords = ["audio", "voice", "speech", "video", "pose", "face", "text", "nlp"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent"
]

[tool.poetry]
packages = [{include = "senselab", from = "src"}]
requires-poetry = ">=2.0"
version = "0.0.0"

[tool.poetry.dependencies]
datasets = "~=3.6"
torch = {version = "~=2.8", markers = "sys_platform != 'darwin' or platform_machine == 'arm64'"}
torchvision = "~=0.23"
transformers = "~=4.55"
pydra = ">=1.0a0"
pydantic = "~=2.11"
accelerate = "*"
huggingface-hub = "~=0.34"
pycountry = "~=24.6"
iso639 = "~=0.1"
types-requests = "~=2.32"
scikit-learn = "~=1.7"
umap-learn = "~=0.5"
python-ffmpeg = "~=2.0"
nest-asyncio = "~=1.6"
matplotlib = "~=3.10"
torchaudio = {version = "~=2.8", optional = true}
praat-parselmouth = {version = "~=0.4", optional = true}
audiomentations = {version = "~=0.42", optional = true}
torch-audiomentations = {version = "~=0.12", optional = true}
speechbrain = {version = "~=1", optional = true}
pyannote-audio = {version = "~=3.3", optional = true}
opensmile = {version = "~=2.6", optional = true}
vocos = {version = "~=0.1", optional = true}
coqui-tts = {version = "~=0.27", optional = true}
speech-articulatory-coding = {version = "~=0.1", optional = true}
jiwer = {version = "~=4.0", optional = true}
nltk = {version = "~=3.9", optional = true}
sentence-transformers = {version = "~=5.1", optional = true}
pylangacq = {version = "~=0.19", optional = true}
opencv-python-headless = {version = "~=4.11", optional = true}
ultralytics = {version = "~=8.3", optional = true}
av = {version = "~=15", optional = true}
nemo-toolkit = {version = "~=2.3", optional = true, extras = ["asr"]}
notebook-intelligence = {version = "~=2.3", optional = true}
ipywidgets = {version = "~=8.1", optional = true}
ipykernel = {version = "*", optional = true}
geopy = {version = "*", optional = true}
nbformat = {version = "*", optional = true}
nbss-upload = {version = "*", optional = true}

[tool.poetry.extras]
audio = [
  "torchaudio",
  "praat-parselmouth",
  "audiomentations",
  "torch-audiomentations",
  "speechbrain",
  "pyannote-audio",
  "opensmile",
  "speech-articulatory-coding",
  "vocos",
  "jiwer",
  "nltk",
  "coqui-tts",
  "nemo-toolkit"
]
text = [
  "sentence-transformers",
  "pylangacq"
]
video = [
  "av",
  "opencv-python-headless",
  "ultralytics"
]
notebook = [
  "notebook-intelligence",
  "ipywidgets",
  "ipykernel",
  "geopy",
  "nbformat",
  "nbss-upload"
]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest-xdist = {version = "~=3.6.1", extras = ["psutil"]}
pytest-mock = "~=3.14"
pytest-cov = "~=6.0"
mypy = "~=1.9"
pre-commit = "~=4.0"
ruff = "~=0.3"
codespell = "~=2.3"
uvloop = "~=0.21"
jupyter = "~=1.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
pdoc = "~=15.0"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = {version = ">=1.0.0,<2.0.0", extras = ["plugin"]}

[tool.pytest.ini_options]
pythonpath = [
  "src"
]
testpaths = [
  "src/tests"
]

[tool.mypy]
ignore_missing_imports = true
plugins = [
  "pydantic.mypy"
]
extra_checks = true

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv"
]
line-length = 120
indent-width = 4
src = ["src"]
target-version = "py310"

[tool.ruff.lint]
select = ["ANN", "D", "E", "F", "I"]
ignore = ["ANN101", "ANN102", "F401"]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"src/tests/**/*.py" = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
bump = true
style = "pep440"
pattern = "default-unprefixed"

[tool.codespell]
skip = [
  "poetry.lock",
  "docs_style/pdoc-theme/syntax-highlighting.css",
  "*.cha",
  "*.ipynb"
]
ignore-words-list = ["senselab", "nd", "astroid", "wil", "SER", "te", "EXPRESSO", "VAI"]

[tool.poetry.scripts]
senselab-ai = "senselab.agentic_interface.launcher:senselab_ai"

[build-system]
requires = ["poetry-core>=2.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"
